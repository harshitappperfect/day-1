Fastify is a web framework designed for building highly performant and lightweight web applications. It is focused on providing high performance, low overhead, and an easy-to-use API for building HTTP servers. Fastify is built with extensibility and high-speed routing in mind, making it a great choice for building RESTful APIs, microservices, or web servers.

In this guide, we'll walk through creating a simple Fastify project from scratch, explaining how Fastify works along the way.

### Prerequisites

- Node.js and npm installed on your machine (you can download them from [here](https://nodejs.org/)).
- Basic understanding of JavaScript and HTTP concepts.

### Step 1: Create the Project Directory

Start by creating a directory for your Fastify project:

```bash
mkdir fastify-demo
cd fastify-demo
```

### Step 2: Initialize the Project

Next, initialize the project with npm:

```bash
npm init -y
```

This will generate a `package.json` file, which is where your project dependencies will be listed.

### Step 3: Install Fastify

Now, install Fastify as a dependency:

```bash
npm install fastify
```

This command installs the Fastify framework so that you can use it in your project.

### Step 4: Create the Application File

Create a new file named `app.js` in the root of your project:

```bash
touch app.js
```

In `app.js`, we'll set up a basic Fastify server. Open the file and add the following code:

```javascript
// Import Fastify
const fastify = require('fastify')();

// Define a route for GET requests to the root
fastify.get('/', async (request, reply) => {
  return { message: 'Hello, Fastify!' };
});

// Define a route for GET requests to /greet
fastify.get('/greet/:name', async (request, reply) => {
  const { name } = request.params;
  return { message: `Hello, ${name}!` };
});

// Start the server on port 3000
const start = async () => {
  try {
    await fastify.listen(3000);
    console.log('Server listening on http://localhost:3000');
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
};

start();
```

### Explanation of the Code

1. **Importing Fastify**: The first line imports the Fastify module and creates a new Fastify instance (`fastify()`).
   
2. **Defining Routes**: We define two routes:
   - `GET /` returns a JSON response with the message "Hello, Fastify!".
   - `GET /greet/:name` takes a `name` parameter from the URL and responds with a personalized greeting, like "Hello, John!".

3. **Starting the Server**: The `start` function uses `fastify.listen()` to start the server on port 3000. If there's an error, it logs the error and exits the process.

### Step 5: Run the Application

Now that we have defined our routes, we can run the application with Node.js:

```bash
node app.js
```

If everything works correctly, you'll see the following message in the terminal:

```
Server listening on http://localhost:3000
```

### Step 6: Test the Routes

You can test your Fastify app by navigating to the following URLs in your browser or using a tool like [Postman](https://www.postman.com/) or `curl`:

1. **Test the root route**:
   - URL: [http://localhost:3000](http://localhost:3000)
   - Expected Response: `{"message":"Hello, Fastify!"}`

2. **Test the greet route**:
   - URL: [http://localhost:3000/greet/John](http://localhost:3000/greet/John)
   - Expected Response: `{"message":"Hello, John!"}`

### Step 7: Adding Validation (Optional)

Fastify has built-in support for input validation. Let’s add validation to our `/greet` route to ensure that the `name` parameter is a string and not empty.

Update the `/greet/:name` route in `app.js` like so:

```javascript
fastify.get('/greet/:name', {
  schema: {
    params: {
      type: 'object',
      properties: {
        name: { type: 'string', minLength: 1 }
      },
      required: ['name']
    }
  }
}, async (request, reply) => {
  const { name } = request.params;
  return { message: `Hello, ${name}!` };
});
```

With this schema validation:
- The `name` parameter is required.
- The `name` must be a non-empty string.

Now, if you try to visit `/greet/` without providing a `name` or provide an empty string, Fastify will automatically return a validation error.

### Step 8: Adding Middleware (Optional)

Fastify supports hooks and middleware. You can add middleware for tasks like logging, authentication, or CORS. For example, let’s add a simple logging middleware that logs each request.

Update the `app.js` file:

```javascript
// Add a simple middleware to log each request
fastify.addHook('onRequest', (request, reply, done) => {
  console.log(`Request made to: ${request.url}`);
  done();
});
```

Now, every time you hit a route, it will log the URL of the request.

### Step 9: Handle Errors

Fastify provides an easy way to handle errors. You can catch and handle errors globally using a `setErrorHandler` function.

For example:

```javascript
fastify.setErrorHandler(function (error, request, reply) {
  console.error(error);
  reply.status(500).send({ error: 'Something went wrong' });
});
```

### Step 10: Graceful Shutdown

For production environments, you may want to handle server shutdown gracefully. Fastify provides a simple way to do this:

```javascript
process.on('SIGINT', async () => {
  await fastify.close();
  console.log('Server gracefully shut down');
  process.exit(0);
});
```

### Final `app.js` Example

Here’s the final version of `app.js`:

```javascript
// Import Fastify
const fastify = require('fastify')();

// Add a simple middleware to log each request
fastify.addHook('onRequest', (request, reply, done) => {
  console.log(`Request made to: ${request.url}`);
  done();
});

// Define a route for GET requests to the root
fastify.get('/', async (request, reply) => {
  return { message: 'Hello, Fastify!' };
});

// Define a route for GET requests to /greet
fastify.get('/greet/:name', {
  schema: {
    params: {
      type: 'object',
      properties: {
        name: { type: 'string', minLength: 1 }
      },
      required: ['name']
    }
  }
}, async (request, reply) => {
  const { name } = request.params;
  return { message: `Hello, ${name}!` };
});

// Error handler for all routes
fastify.setErrorHandler(function (error, request, reply) {
  console.error(error);
  reply.status(500).send({ error: 'Something went wrong' });
});

// Gracefully shutdown server on SIGINT
process.on('SIGINT', async () => {
  await fastify.close();
  console.log('Server gracefully shut down');
  process.exit(0);
});

// Start the server on port 3000
const start = async () => {
  try {
    await fastify.listen(3000);
    console.log('Server listening on http://localhost:3000');
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
};

start();
```

### Summary

In this guide, we learned how to:

- Set up a Fastify project from scratch.
- Define simple routes with Fastify.
- Handle URL parameters.
- Add basic validation for request parameters.
- Use middleware for logging requests.
- Gracefully shut down the server.

Fastify provides an easy-to-use, high-performance framework for building web servers and APIs, with built-in support for validation, middleware, and error handling. It's a great choice for both beginners and advanced users who need to build scalable and fast web applications.

